<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- <mapper namespace="com.lyp.mybatis.EmployeeMapper"> -->
<mapper namespace="com.lyp.mybatis.dao.EmployeeMapper"> <!-- 接口类 -->

<!-- 
namespace:名称空间;指定为接口的全类名
id：唯一标识
resultType：返回值类型
#{id}：从传递过来的参数中取出id值

public Employee getEmpById(Integer id);

 -->
 <!-- id接口方法绑定 last_name lastName 属性别名 -->
	<select id="getEmpById" resultType="emp" databaseId="mysql">
		select * from tbl_employee where id = #{id}
	</select>
	
<!-- 	public void addEmp(Employee employee); -->
<!-- 		parameterType:参数类型 ，可省略 -->
<!-- 		mysql 支持自增主键，自增主键值的获取，mybatis利用statement.Genreatedkey是(); -->
<!-- 		keyPropety: 指定对应主键的属性，也就是mybatis获取到直荐制以后将这个值封装给javaBean的哪个属性 -->

	<insert id="addEmp"  parameterType="com.lyp.mybatis.bean.Employee"
	useGeneratedKeys="true" keyProperty="id">
		insert into tbl_employee (last_name,email,gender) values (#{lastName},#{email},#{gender})
	</insert>
	
<!-- 	public void deleteEmpById (Integer id); -->
	<delete id="deleteEmpById" >
		delete from  tbl_employee where id = #{id} 
	</delete>	

<!-- 	public void updateEmp(Employee employee); -->
	<update id="updateEmp">
		update  tbl_employee 
		set last_name = #{lastName},
		email = #{email},
		gender = #{gender}
		where id = #{id}  
	</update>
	
<!-- 	oracl  不支持自增； Oralce 使用序列来模拟自增 -->
<!-- 	每次插入的数据的主键都是从序列中拿值的，如何获取这个值 -->
	
	
	<select id="getEmpById" resultType="emp" databaseId="oracle">
		select EMPLOYEE_ID id,LAST_NAME lastName,EMAIL email from employees 
		 where EMPLOYEE_ID=#{id}
	</select>
	
	
</mapper>