<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
	<!-- 
		1、mybatis ：可以使用properties来引入外部properties 配置文件的内容
			resource :引入类路径下的资源
		url:引入网络路径或磁盘路径下的资源
	 -->
	 
	<properties resource="dbconfig.properties"></properties>
	<!-- 
		2、setting:用来设置每一项
			name:设置项名
			value: 设置项取值
			
			
		3、	<typeHandlers xmlns="default namespace"></typeHandlers>   
				类型处理器 ： 处理java 数据类型和 数据库类型的桥梁  
				JSR-310    时间和日期 库  在MyBatis 3.4后 
	4、	<plugins></plugins>  
			可以拦截这几个处理器
			Executor
			ParameterHandler
			ResultSetHandler	结果集处理器
			StatementHandler  	sql 	
			
	5、	<environments default=""></environments> 
		environments： 环境们，mybatis 可以配置多种环境， default 指定使用某种环境
			 environment：配置一个具体的环境信息，必须有两个标签：id代表当前环境的唯一标识
					transactionManager ：事务管理器
						type:事务管理器类型 
									 JDBC（JdbcTransactionFactory）
									 |MANAGED （ManagedTransactionFactory）
						
					dataSource ：数据源 | JNDI  POOLED  UNPOOLED
						type:数据源类型： 
								JNDI(JndiDataSourceFactory) 
								POOLED(PooledDataSourceFactory)
								UNPOOLED(UnpooledDataSourceFactory)
							自定义的数据源
							
	6、 	<databaseIdProvider type=""></databaseIdProvider>：支持多数据库厂商的；
		type="DB_VENDOR": VendorDatabaseIdProvider 
			作用就是得到数据库厂商的标识（驱动 getDatabaseProcutName()）,mybatis就能根据数据库厂商表示执行不同sql	
			MySQL,Oracle SQL Server XXX
	 	
	 -->
	 
	<settings><!-- 驼峰处理 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
	</settings>
	
	
	<typeAliases> 
	<!-- 别名 
			为某个java类型起别名
			type:指定且别名类型的全类名；默认别名小写；employee
			alise：指定新的别名
	-->
		<typeAlias type="com.lyp.mybatis.bean.Employee" alias="emp"/>
	</typeAliases>	
	

	<environments default="dev_mysql"> <!-- 这个别名是数据库的连接有关 -->
		<environment id="dev_mysql"> <!-- 这个别名随便给 --> 
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<!-- <property name="driver" value="com.mysql.jdbc.Driver" />
				<property name="url" value="jdbc:mysql://localhost:3306/mybatis" />
				<property name="username" value="root" />
				<property name="password" value="lyp12345" /> -->
				
			 	<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" /> 
			</dataSource>
		</environment>
		
		<environment id="dev_oracle">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
			 	<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" /> 
			</dataSource>
		</environment>
		
	</environments>
	
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider>
	
	
	<!-- 
			mapper:注册一个sql映射 
				注册配置文件
				resource：引用类路径下的sql映射文件
					mybatis/mapper/EmployeeMapper.xml
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml
					
				注册接口
				class：引用（注册）接口，
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
		-->
	<!--
		
		 
		将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中
	 -->
	<mappers>
<!-- 		<mapper resource="EmployeeMapper.xml" /> -->
<!-- 		<mapper class ="com.lyp.mybatis.dao.EmployeeMapperAnnotation" /> -->
	<!-- 批量注册：  注解班可以运行，配置版的需要sql映射文件和接口 java文件放在一起 -->
		<package name = "com.lyp.mybatis.dao"/>
	</mappers>
</configuration>